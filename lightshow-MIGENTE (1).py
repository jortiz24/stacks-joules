# This is made for Mi Gente  (song file is provided)
# The lightshow fits first 60 seconds of the song
# This requires a microphone
# do 'pip install pygame' in Command Prompt or Terminal or PowerShell 
# (If you use Mac, and have problem installing pygame, please refer: http://www.pygame.org/wiki/GettingStarted#Mac installation )
# then run this code (no need to install pygame again if pygame is already installed)
# clap once to start the lightshow

import time
from array import array
from time import time
from random import *
import wave

import pyaudio
from pygame import mixer

from qstation import *

connect('172.16.0.1')
light0_sn = 'MD1AC44200001773'
light1_sn = 'MD2AC44400002190'
light2_sn = 'MD1AC44200002979'
set_group(light0_sn,1)
set_group(light1_sn,1)
set_group(light2_sn,1)

color = []
color.append((256*random(),256*random(),256*random()))
print(color)
def start():
    ''' start the lightshow'''

    global endShow,color
    stream2 = p.open(format=FORMAT,
                channels=CHANNELS, 
                rate=RATE, 
                input=True,
                frames_per_buffer=CHUNK)



    turn_off(light0_sn)
    sleep(0.2)
    turn_off(light1_sn) 
    sleep(0.2)
    turn_off(light2_sn)
    sleep(0.7)

    
    mixer.init()
    mixer.music.load('One_-_Winged Angel (Final Fantasy VII).wav')
    mixer.music.play()

    print(mixer.find_channel(force=True))
    print(mixer.get_num_channels())
    # array that has tuples in the form of (timeCode, sn, color)
    y = [8960, 30464, 40768, 52416, 73920, 96320, 117376, 138880, 159936, 171584, 186368, 197568, 213696, 226688, 248192, 269248, 291200, 312704, 334656, 355264, 375872, 400960, 420672, 442176, 463680, 475328, 486080, 506688, 525952, 538944, 551936, 572096, 593152, 626752, 670208, 681856, 694848, 710528, 722176, 732480, 743680, 764736, 775488, 786240, 798336, 809984, 820288, 831936, 879872, 894656, 917504, 969024, 1014720, 1026368, 1037120, 1060416, 1070720, 1081024, 1095808, 1113280, 1124480, 1135680, 1155392, 1176896, 1199744, 1221248, 1242752, 1263808, 1284416, 1306368, 1334592, 1348928, 1370880, 1391936, 1413440, 1435840, 1456896, 1478848, 1493184, 1521856, 1542912, 1564416, 1607872, 1629824, 1651776, 1672384, 1693440, 1715392, 1737344, 1748992, 1766464, 1782144, 1816640, 1837248, 1859648, 1870848, 1882496, 1894592, 1908480, 1939392, 1962240, 1974336, 1986432, 1997632, 2073344, 2083648, 2104704, 2145024, 2162048, 2226112, 2243584, 2325120, 2430848, 2451008, 2495808, 2522688, 2537472, 2549120, 2563008, 2583616, 2625728, 2687552, 2700544, 2713088, 2728320, 2759680, 2786560, 2797760, 2808960, 2837632, 2851968, 2865408, 2876160, 2888704, 2935744, 2953216, 2963968, 2980096, 3019968, 3031168, 3042816, 3054016, 3064768, 3089408, 3109568, 3129728, 3143616, 3174080, 3190208, 3207680, 3222464, 3233216, 3248448, 3269952, 3281152, 3291456, 3303552, 3325056, 3337152, 3356864, 3367168, 3377472, 3389120, 3411072, 3421824, 3437504, 3452288, 3476032, 3494400, 3505600, 3517248, 3537856, 3558912, 3581760, 3601920, 3623424, 3633728, 3644928, 3656128, 3671808, 3708544, 3793216, 3804416, 3814720, 3825024, 3835328, 3879232, 3952704, 3963456, 3984064, 4004224, 4017664, 4059328, 4070976, 4091584, 4102784, 4115328, 4134144, 4156992, 4176704, 4195072, 4219264, 4242112, 4273920, 4304832, 4321856, 4336640, 4347392, 4368448, 4390848, 4401152, 4411456, 4455808, 4476416, 4486720, 4497472, 4541376, 4563776, 4606336, 4629184, 4652032, 4662336, 4673984, 4697280, 4740288, 4751040, 4761792, 4787328, 4809728, 4834816, 4845568, 4856768, 4870656, 4882304, 4893952, 4915904, 4926208, 4966976, 4977728, 5009984, 5029696, 5046720, 5078080, 5089280, 5100032, 5113024, 5135424, 5151552, 5187840, 5198592, 5210688, 5223232, 5233536, 5247424, 5274752, 5287744, 5310592, 5320896, 5332544, 5352704, 5364352, 5376448, 5398848, 5409152, 5419456, 5451712, 5462464, 5485760, 5511744, 5526976, 5548480, 5569984, 5581632, 5613440, 5634048, 5656000, 5708416, 5719616, 5730816, 5742464, 5752768, 5764416, 5774720, 5792192, 5809216, 5828032, 5838336, 5857152, 5871488, 5891200, 5912256, 5923008, 5946752, 5957952, 5968704, 5988416, 6009472, 6028736, 6042624, 6056512, 6071296, 6087872, 6108928, 6119680, 6149248, 6172992, 6200320, 6215104, 6225408, 6239744, 6264384, 6276032, 6292160, 6306048, 6316800, 6360704, 6373696, 6401472, 6421184, 6437312, 6460160, 6559168, 6580224, 6656384, 6714176, 6745984, 6776448, 6806016, 6818560, 6875008, 7003136, 7028224, 7057344, 7073920, 7090944, 7110656, 7147392, 7175616, 7189504, 7208768, 7221312, 7235200, 7271488, 7286272, 7306880, 7327040, 7340480, 7357952, 7371840, 7383936, 7395584, 7425152, 7439040, 7499968, 7525056, 7571200, 7589120, 7611520, 7634368, 7654080, 7701568, 7719936, 7740544, 7762496, 7773696, 7784448, 7806400, 7857024, 7870912, 7903616, 7915264, 7947072, 7957376, 7985600, 8000384, 8024128, 8043840, 8098048, 8129856, 8149120, 8171968, 8193472, 8216320, 8240960, 8258880, 8279488, 8290688, 8305920, 8326528, 8350720, 8397312, 8416128, 8427328, 8438528, 8453760, 8468992, 8484224, 8504832, 8516480, 8532160, 8560832, 8572480, 8586368, 8598912, 8612800, 8661632, 8681792, 8714496, 8743616, 8766912, 8777216, 9007936, 9087680, 9120832, 9131136, 9141888, 9152192, 9183104, 9199232, 9217152, 9240896, 9254784, 9265088, 9326016, 9398592, 9415616, 9432640, 9466688, 9497152, 9523136, 9570176, 9592576, 9602880, 9655296, 9689344, 9712192, 9755200, 9777152, 9799552, 9822400, 9843904, 9887360, 9897664, 9972928, 9985472, 9996672, 10017280, 10070592, 10087168, 10103744, 10126144, 10146304, 10159296, 10190208, 10211264, 10230528, 10257408, 10273536, 10286976, 10299968, 10317440, 10332672, 10345664, 10356864, 10368960, 10381504, 10403008, 10428096, 10453632, 10465728, 10478720, 10489472, 10510080, 10530240, 10542336, 10554432, 10575040, 10596544, 10617152, 10638208, 10652096, 10671360, 10691072, 10701376, 10730944, 10743040, 10764544, 10785600, 10807552, 10826816, 10848320, 10868032, 10879680, 10908800, 10921344, 10932544, 10976000, 11007360, 11018560, 11039168, 11049920, 11060672, 11071424, 11082176, 11092928, 11112640, 11123392, 11135040, 11156096, 11166848, 11187904, 11199104, 11210304, 11221952, 11241216, 11251968, 11264064, 11276160, 11435648, 11458048, 11471936, 11491648, 11514944, 11537792, 11557504, 11573184, 11592448]
    peaks = [0.9687247614710608, 0.6541489503685664, 0.23523956768809742, 0.5867605116324883, 0.6302996490714711, 0.6882867879343771, 0.7055070494897655, 0.5697243507805242, 0.5096160934566231, 0.33351324735819166, 0.33289163874463235, 0.2054252678158873, 0.3294920557491329, 0.28823477128203284, 0.4308817275186252, 0.2731365899921749, 0.41097924770930694, 0.3084081687982801, 0.2969409693597929, 0.812982086843142, 1.0, 0.35037181383153, 0.6420733246963286, 0.5443312966273645, 0.7125646014403645, 0.287460405477556, 0.40345459821492474, 0.7446102312579798, 0.3392341738882629, 0.32932424914607317, 0.3458827891811021, 0.3977318329408888, 0.2910882756083711, 0.30384434970104, 0.3128437284318869, 0.22560460588955916, 0.3639726351899725, 0.2084574414788616, 0.588856340291876, 0.2004591881158979, 0.8437451220244243, 0.5842478821488456, 0.3332240270767213, 0.9219938615371481, 0.2625911953357685, 0.34691520148475463, 0.27280188201385347, 0.25187012990980706, 0.24968536261926305, 0.36649567479329265, 0.282572005637985, 0.20636738364668641, 0.24165836827371193, 0.5141412140654974, 0.3905210428971046, 0.45979178968571, 0.323628555840872, 0.29530522272875376, 0.3789402939467021, 0.33192819348384217, 0.24748554591657682, 0.2231780862002039, 0.4878130737411577, 0.32722035122951715, 0.49193857870975505, 0.25491675892918114, 0.4370579270543678, 0.21423372834645601, 0.20566363975464028, 0.23826384889620766, 0.2523400987230121, 0.3602287120266132, 0.4070625816225518, 0.2301340829072115, 0.2974337951748982, 0.21549575733875248, 0.37255648607315517, 0.2111276371760989, 0.24994971742465633, 0.22687186823006297, 0.3665826049502722, 0.28439349369783234, 0.21307614001135722, 0.21087790745731752, 0.3515596990094941, 0.44167580522417144, 0.2569333801562412, 0.30813082963165883, 0.906423490797143, 0.42783159074153376, 0.2387623182408663, 0.27401797069539996, 0.8230547262820275, 0.4590835620872267, 0.34271030520943324, 0.20765993578879768, 0.31636432906863543, 0.8626853163960686, 0.408716121637496, 0.24458542235864006, 0.33799701037204355, 0.4360674664014802, 0.380993972936744, 0.3062527082576973, 0.24183522715475192, 0.21215999290301407, 0.38432662565192666, 0.508453894117428, 0.26786301572454235, 0.32275959373150115, 0.2655105549844134, 0.31573757197197483, 0.23754303297365803, 0.280505087691397, 0.20895033801488863, 0.23634869804763298, 0.4073262009303592, 0.25155861839381016, 0.24788384614770975, 0.2927885762967572, 0.398810666457559, 0.2264022813098352, 0.34287392513392706, 0.26137536124954025, 0.27132460682420684, 0.26625154051383787, 0.3054860934662411, 0.2837609657739593, 0.23473111254929177, 0.306234943162161, 0.306555789839825, 0.2323220184950486, 0.31185618148097416, 0.3947060241608694, 0.23353932357644866, 0.29468842313787147, 0.49054769619808286, 0.37556373768331497, 0.2710059666393005, 0.27162949886193066, 0.2818194784541357, 0.2021917941213262, 0.5066325757877929, 0.3381918606555694, 0.6817976624642031, 0.36075534244230123, 0.24944298787634067, 0.658146549478139, 0.4188338527360708, 0.47830415076931065, 0.353598668047818, 0.25739077478956424, 0.5696686792709453, 0.5263375744952973, 0.3716055159829566, 0.2279184812947971, 0.43565083530743715, 0.3261406195571411, 0.36668107676167655, 0.29439337545245126, 0.2713218345640754, 0.2949834142465543, 0.4409684828534862, 0.2837928750538398, 0.22522259975879075, 0.24861515705504278, 0.2620605621159111, 0.20269679807915186, 0.2706842713105758, 0.3433241628099719, 0.24860078656374907, 0.615294536514598, 0.3797746876695357, 0.3654572653554781, 0.2954049675167491, 0.4548870391690371, 0.42931831424632233, 0.3295309805444481, 0.3803213886828081, 0.23315584645050846, 0.22150035963003115, 0.6225761889219467, 0.24993837378881228, 0.23540290472890435, 0.2567499866620342, 0.26394049394546876, 0.24394327638941293, 0.6546966697631115, 0.6374519104804389, 0.3124329247417937, 0.3162415009717903, 0.28639806407983115, 0.3065223529880353, 0.2940057682246825, 0.29000647181298855, 0.22919349464832153, 0.33500511934608157, 0.2828852710328406, 0.39809497072974204, 0.2817901717041745, 0.24741052516281511, 0.613624730687658, 0.33669597171932575, 0.2163631352994768, 0.29427756287104084, 0.38276527743053806, 0.20182902408126593, 0.2031786621513904, 0.3671123612307002, 0.47123952672653957, 0.2758782421087191, 0.2709233646027303, 0.22763644625897356, 0.5080613647135076, 0.3237649057779502, 0.34187919293736746, 0.8414292664333781, 0.6019997953053642, 0.22749704117807704, 0.27356657319623884, 0.2111529835544437, 0.49312502118091606, 0.2618009314680888, 0.27476430272650654, 0.3010270261982543, 0.220727295090514, 0.2424623237118368, 0.4487027491598496, 0.22192649561595348, 0.5970387509350014, 0.28514101384042384, 0.3309258234277367, 0.49645176162704285, 0.28755053222019733, 0.2119461328357296, 0.4271971957853273, 0.2361580910194104, 0.6955409440473607, 0.34262156459685766, 0.7549072540373019, 0.28705446738687723, 0.555186731804596, 0.2703478660301331, 0.5244065538718884, 0.34413782115855696, 0.24987418748025825, 0.5568621387285363, 0.2034457043518091, 0.46924553619443027, 0.2119630492802053, 0.36247154119389025, 0.44444840481606085, 0.33957108835934197, 0.206150525012321, 0.6202834732164877, 0.207560219289171, 0.5098373650765039, 0.45667712713964026, 0.5748261014967433, 0.28689950370320205, 0.2611498463743562, 0.25326350179792384, 0.32135451045874736, 0.2424471611462198, 0.21599957318509322, 0.3044929454183281, 0.3183002718681961, 0.23331884403089112, 0.2521809625049554, 0.46951031532535387, 0.28337816756886763, 0.26127737034040355, 0.2152184747488686, 0.27357579520443126, 0.27074050858752835, 0.361087561044178, 0.4809887169578417, 0.33499946167234385, 0.46412681245699816, 0.63601242855136, 0.4261658018629475, 0.39605447411950895, 0.24380568176411246, 0.37266508512055, 0.37927415327396286, 0.5623311290470684, 0.3753245312376857, 0.3407275168713245, 0.3238380029226411, 0.6753860471242356, 0.686105302094601, 0.3387291133536998, 0.3331082144953109, 0.24741991690121967, 0.2915595032539828, 0.30633055784832786, 0.3573061982248596, 0.33610819599471775, 0.2001511843576184, 0.22044916384956947, 0.2732776357984553, 0.29026321704720465, 0.2545433807508627, 0.3140217126808101, 0.20408111768928835, 0.2728475394409166, 0.3698575211049618, 0.3111684912381587, 0.2522725602427685, 0.29238343028040165, 0.349702963642261, 0.2020452603715202, 0.2883389290555436, 0.47253762338891375, 0.2204999131829965, 0.21938670929836981, 0.3333373502816871, 0.28152493995935185, 0.38356227392996556, 0.21106234762116602, 0.36517242977115444, 0.23610966133221584, 0.4236147850629945, 0.20549185863577984, 0.23096304526325692, 0.21776210828459389, 0.20295971017774203, 0.2259481964156487, 0.3164383314411244, 0.2042361379497009, 0.33699290058126374, 0.23017148013061758, 0.33942025477749527, 0.2850940268600324, 0.24064847351153534, 0.20821223789907037, 0.23676872374591862, 0.37475822638491224, 0.24820254290935348, 0.29948160432843723, 0.4869470394779461, 0.3491061922164101, 0.25298231541316096, 0.27443044339924577, 0.23291714919551557, 0.2515631445328003, 0.40692784412248884, 0.3480275001415833, 0.20366346821397255, 0.2735742110557847, 0.36739235950397814, 0.3383112375714345, 0.30420315936948394, 0.23644052209239558, 0.3098913845453513, 0.3290734444692816, 0.20825540594968892, 0.2803902086261533, 0.2782918623019524, 0.20643674672671042, 0.2559748853599715, 0.3103873362251967, 0.22941233346849516, 0.2485044363799963, 0.21939332877664292, 0.22652895662482195, 0.3322450797898898, 0.24490083766951593, 0.3688923785420503, 0.2531555533830088, 0.47982482031652535, 0.3446523017198932, 0.38056025566801316, 0.22678762546810885, 0.48890957334407387, 0.25890940757423336, 0.25067047677046855, 0.34766676686406855, 0.47616475802214286, 0.2869531384502353, 0.37310378114217, 0.3521766117538511, 0.4025679275867549, 0.38004042860499476, 0.493386320842491, 0.3067832849008173, 0.7807832472207102, 0.3686388581818647, 0.24071579982901378, 0.3158425783965462, 0.22444778134041493, 0.8804040048635626, 0.2055650123572081, 0.27676728895985875, 0.5054144786320696, 0.5866778530191809, 0.46251980680854643, 0.6762984035911744, 0.26007816981496407, 0.2014204268839304, 0.23331273374325442, 0.27682318677638706, 0.21105623733352932, 0.2155157289270465, 0.2856399357989815, 0.20350344091230216, 0.21901880491939257, 0.2675535692594597, 0.22192731597864546, 0.2404341325419832, 0.29717542335948255, 0.23746688068514882, 0.2272125733425463, 0.2606040505888818, 0.2210204191668634, 0.2614355588981092, 0.2121618599353475, 0.23969232664986678, 0.22902003037152416, 0.27478235070572976, 0.20845336795377048, 0.2170881096122236, 0.24130182167476308, 0.23392325331628788, 0.2220593943720517, 0.2027010979111925, 0.2392594014554592, 0.27607942898683113, 0.24930380910239366, 0.2066263919503976, 0.2007525384991968, 0.2522591232676415, 0.35760922323024996, 0.23498401056536625, 0.2961917236267114, 0.22671843211829698, 0.22888418962508236, 0.37664791770166733, 0.22173532282035716, 0.22745149690448868, 0.24336851331440162, 0.2114722460834612, 0.25821079802110414, 0.2104121677552314, 0.23434848407441222, 0.2699133001103416, 0.29284074004861865, 0.20537825254712716, 0.2075980974148448, 0.2210324134351873, 0.35695236730930485, 0.22086576665524382, 0.26868320868629436, 0.2974569492046697, 0.2515847568464783, 0.9417782374071922, 0.2987533485649226, 0.31938281116116457, 0.2275657819139899, 0.31379698987994925, 0.5613531435647724, 0.21073612615345116, 0.3634686496134196, 0.25891642308966806, 0.22500840023108204, 0.2418980273332402, 0.5317556457501903, 0.3867853940815867, 0.25173966395341607, 0.3173236442275971, 0.23425699949007386, 0.25094385556547344, 0.37073502630167654, 0.24463566250143068, 0.33899626870759325, 0.28278377236598656, 0.5403752814197638, 0.3233851627166769, 0.2831714361704926, 0.32174941608563773, 0.3403351006208788, 0.3368659282384058, 0.24679067042811448, 0.4339742402720119, 0.3082624271227974, 0.3199227795426891, 0.3154752822174958, 0.4583890260591887, 0.469875914202283, 0.36459905282620886, 0.3699886659822013, 0.3600847949509109, 0.2591164784330326, 0.26542817925479273, 0.3147998691266911, 0.2580340522935389, 0.20967327556508986, 0.3358873204119986, 0.24941967826054143, 0.30050756688402885, 0.37345399114653266, 0.31444196468604524, 0.4801234323364003, 0.6041173494319045, 0.3640623658954522, 0.3181866657795434, 0.2090664334799859, 0.2365965607340809, 0.28258688531991516, 0.3664857738642517, 0.40437080190000524, 0.27962430104391434, 0.30099175060249983, 0.22233843084079424, 0.4279685064459857, 0.41315513245208274, 0.260906453250161, 0.20241023690433818, 0.28467394458500933, 0.28700094579331875, 0.403701159636413, 0.3122456557410763, 0.20831713117016704, 0.3887690876474934, 0.25483180895800983, 0.4271815240290739, 0.30609327501176936]

    print(len(y),len(peaks))
    info_array = [(y[x]/44100,peaks[x],color[-1]) for x in range(len(y))]
    
    """[(0.1, light0_sn, (0, 0, 0)),                  

                  #la la la la la
    (1.1, light0_sn, (0, 0, 0)),
                  (1.2, light0_sn, (2, 20, 255)),
                  (2.2, light1_sn, (2, 20, 255)),
                  (3.3, light2_sn, (2, 20, 255)),
                  (4.3, light0_sn, (0, 0, 0)),
                  (4.4, light1_sn, (0, 0, 0)),
                  (4.5, light2_sn, (0, 0, 0)),

                  #after freeze 1
                  (5.8, light0_sn, (255, 12, 34)),
                  (6.8, light1_sn, (255, 12, 34)),
                  (7.9, light2_sn, (255, 12, 34)),
                  (8.7, light0_sn, (0, 0, 0)),
                  (8.8, light1_sn, (0, 0, 0)),
                  (8.9, light2_sn, (0, 0, 0)),

                  #after freeze 2
                  (10.5, light0_sn, (85, 107, 13)),
                  (11.5, light1_sn, (85, 107, 13)),
                  (12.5, light2_sn, (85, 107, 13)),
                  (13.5, light0_sn, (0, 0, 0)),
                  (13.6, light1_sn, (0, 0, 0)),
                  (13.7, light2_sn, (0, 0, 0)),

                  #after freeze 3
                  (14.9, light0_sn, (22, 100, 0)),
                  (16, light1_sn, (22, 100, 0)),
                  (17.1, light2_sn, (22, 100, 0)),
                  (18.2, light0_sn, (0, 0, 0)),
                  (18.3, light1_sn, (0, 0, 0)),
                  (18.4, light2_sn, (0, 0, 0)),

                  #y donde de estan mi gente
                  (19.4, light0_sn, (255, 128, 0)),
                  (19.9, light1_sn, (255, 128, 0)),
                  (20.4, light2_sn, (255, 128, 0)),
                  (20.9, light2_sn, (128, 0, 0)),
                  (20.95, light1_sn, (128, 0, 0)),
                  (21, light0_sn, (128, 0, 0)),

                  (21.6, light0_sn, (200, 250, 80)),
                  (22.1, light1_sn, (200, 250, 80)),
                  (22.6, light2_sn, (200, 250, 80)),
                  (23.2, light2_sn, (0, 0, 180)),
                  (23.3, light1_sn, (0, 0, 180)),
                  (23.4, light0_sn, (0, 0, 180)),

                  (24, light0_sn, (165, 42, 42)),
                  (24.6, light1_sn, (165, 42, 42)),
                  (25.2, light2_sn, (165, 42, 42)),
                  (25.8, light0_sn, (0, 0, 0)),
                  (25.9, light1_sn, (0, 0, 0)),
                  (26.0, light2_sn, (0, 0, 0)),

                  #1,2,3,4
                  (26.5, light0_sn, (255, 0, 0)),
                  (27.1, light1_sn, (0, 255, 0)),
                  (27.7, light2_sn, (0, 0, 255)),
                  (28.2, light0_sn, (200, 200, 0)),
                  (28.3, light1_sn, (200, 200, 0)),
                  (28.4, light2_sn, (200, 200, 0)),

                  #crazy part
                  (29, light0_sn, (0, 102, 255)),
                  (29.6, light1_sn, (103, 0, 255)),
                  (30.1, light2_sn, (10, 127, 255)),
                  (30.6, light0_sn, (0, 0, 0)),
                  (30.7, light1_sn, (0, 0, 0)),
                  (30.8, light2_sn, (0, 0, 0)),

                  (31.3, light0_sn, (165, 42, 42)),
                  (31.9, light1_sn, (165, 42, 42)),
                  (32.5, light2_sn, (165, 42, 42)),
                  (33.1, light0_sn, (0, 0, 0)),
                  (33.2, light1_sn, (0, 0, 0)),
                  (33.3, light2_sn, (0, 0, 0)),

                  (33.9, light0_sn, (0, 255, 0)),
                  (34.5, light1_sn, (0, 255, 0)),
                  (35.1, light2_sn, (0, 255, 0)),
                  (36.2, light0_sn, (0, 0, 0)),
                  (36.3, light1_sn, (0, 0, 0)),
                    (36.4, light2_sn, (0, 0, 0))]
"""
                  

    length = len(info_array)
    next_color = (0, 0, 0)
    next_peak = info_array[0][1]
    previous_light = light0_sn
    light = light0_sn
    next_time_code = 0.0
    start_time = time()
    next_index = 1
    val = 0.33
    sleep(0.6)

    # loop to find a match between the timecode and the current time
    # set the color accordingly
    while next_index < length:
        as_ints = array('h',stream.read(CHUNK))
        #print(as_ints[-1])
        current_time = time() - start_time
        if current_time >= next_time_code:
            
            next_change = info_array[next_index]
            next_time_code = next_change[0]

            if  0.66 >= next_peak > 0.33:
                if previous_light != light:
                    color = []
                    color.append((256*random(),256*random(),256*random()))
                    val = 1
                light = light1_sn
            if 1 >= next_peak >0.66:
                if previous_light != light:
                    color = []
                    color.append((256*random(),256*random(),256*random()))
                    val = 0.66
                light = light2_sn
            if next_peak <= 0.33:
                if previous_light != light:
                    color = []
                    color.append((256*random(),256*random(),256*random()))
                    val = 0.33
                light = light0_sn
            
            next_peak = next_change[1]
            set_color(tuple(map(lambda x: x*(val/1)//1,color[-1])),light,0)
            next_index = next_index + 1
        """ if as_ints[-1] > 100:
            
            colors1 = (abs(as_ints[-1])%256*random(),abs(as_ints[-1])%256*random(),abs(as_ints[-1])%256*random())
            colors2 = (abs(as_ints[-1])%256*random(),abs(as_ints[-1])%256*random(),abs(as_ints[-1])%256*random())
            colors3 = (abs(as_ints[-1])%256*random(),abs(as_ints[-1])%256*random(),abs(as_ints[-1])%256*random())
        """
        
        """set_color(color[-1], light,0)
        set_color(color[-1], light,0)
        set_color(((color[-1]+colors2[0])%256,(colors1[0]+colors2[0])%256,(colors1[0]+colors2[0])%256), light,0)"""
        
    sleep(0.7)

    # turn off the lights
    turn_off(light1_sn)
    sleep(0.2)
    turn_off(light0_sn)
    sleep(0.2)
    turn_off(light2_sn)
    mixer.music.stop()
    global endShow
    endShow = True

# the following code is taken from https://github.com/nikhiljohn10/pi-clap
# with some small modifications


# main

# global variable
global endShow
endShow = False

CHUNK = 2048
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100
threshold = 1000
max_value = 0
p = pyaudio.PyAudio()
stream = p.open(format=FORMAT,
                channels=CHANNELS, 
                rate=RATE, 
                input=True,
                frames_per_buffer=CHUNK)




print("Clap detection initialized")
while not endShow:
    data = stream.read(CHUNK)
    
    as_ints = array('h', data)
    max_value = max(as_ints)
    

    if max_value > threshold:
        print("Clapped")
        start()

stream.stop_stream()
stream.close()
p.terminate()
